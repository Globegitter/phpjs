<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: strings | ]]></title>
  <link href="http://phpjs.org/categories/strings/atom.xml" rel="self"/>
  <link href="http://phpjs.org/"/>
  <updated>2012-10-02T02:24:39+02:00</updated>
  <id>http://phpjs.org/</id>
  <author>
    <name><![CDATA[Kevin van Zonneveld]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript substr_count function]]></title>
    <link href="http://phpjs.org/functions/substr_count"/>
    <updated>2012-09-26T14:00:00+02:00</updated>
    <id>http://phpjs.org/functions/substr_count</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's substr_count</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strings/substr_count.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/substr_count.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">substr_count</span> <span class="p">(</span><span class="nx">haystack</span><span class="p">,</span> <span class="nx">needle</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Onno Marsman</span>
</span><span class='line'><span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Thomas</span>
</span><span class='line'><span class="c1">// *     example 1: substr_count(&#39;Kevin van Zonneveld&#39;, &#39;e&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: 3</span>
</span><span class='line'><span class="c1">// *     example 2: substr_count(&#39;Kevin van Zonneveld&#39;, &#39;K&#39;, 1);</span>
</span><span class='line'><span class="c1">// *     returns 2: 0</span>
</span><span class='line'><span class="c1">// *     example 3: substr_count(&#39;Kevin van Zonneveld&#39;, &#39;Z&#39;, 0, 10);</span>
</span><span class='line'><span class="c1">// *     returns 3: false</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">haystack</span> <span class="o">+=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">needle</span> <span class="o">+=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">offset</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">length</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">offset</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">((</span><span class="nx">offset</span> <span class="o">=</span> <span class="nx">haystack</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">needle</span><span class="p">,</span> <span class="nx">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">offset</span> <span class="o">+</span> <span class="nx">needle</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">cnt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/substr_count.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/substr_count.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript str_repeat function]]></title>
    <link href="http://phpjs.org/functions/str_repeat"/>
    <updated>2012-09-26T14:00:00+02:00</updated>
    <id>http://phpjs.org/functions/str_repeat</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's str_repeat</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strings/str_repeat.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/str_repeat.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">str_repeat</span> <span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">multiplier</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +   improved by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)</span>
</span><span class='line'><span class="c1">// +   improved by: Ian Carter (http://euona.com/)</span>
</span><span class='line'><span class="c1">// *     example 1: str_repeat(&#39;-=&#39;, 10);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;-=-=-=-=-=-=-=-=-=-=&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">multiplier</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">y</span> <span class="o">+=</span> <span class="nx">input</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">multiplier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">multiplier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">input</span> <span class="o">+=</span> <span class="nx">input</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/str_repeat.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/str_repeat.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript sprintf function]]></title>
    <link href="http://phpjs.org/functions/sprintf"/>
    <updated>2012-09-26T14:00:00+02:00</updated>
    <id>http://phpjs.org/functions/sprintf</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's sprintf</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strings/sprintf.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/sprintf.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">sprintf</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Ash Searle (http://hexmen.com/blog/)</span>
</span><span class='line'><span class="c1">// + namespaced by: Michael White (http://getsprink.com)</span>
</span><span class='line'><span class="c1">// +    tweaked by: Jack</span>
</span><span class='line'><span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +      input by: Paulo Freitas</span>
</span><span class='line'><span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +      input by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +   improved by: Dj</span>
</span><span class='line'><span class="c1">// *     example 1: sprintf(&quot;%01.2f&quot;, 123.1);</span>
</span><span class='line'><span class="c1">// *     returns 1: 123.10</span>
</span><span class='line'><span class="c1">// *     example 2: sprintf(&quot;[%10s]&quot;, &#39;monkey&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 2: &#39;[    monkey]&#39;</span>
</span><span class='line'><span class="c1">// *     example 3: sprintf(&quot;[%&#39;#10s]&quot;, &#39;monkey&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 3: &#39;[####monkey]&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/%%|%(\d+\$)?([-+\&#39;#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuideEfFgG])/g</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">format</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// pad()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pad</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="nx">chr</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">chr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">chr</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">padding</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">len</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="nx">len</span> <span class="o">-</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="nx">chr</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">leftJustify</span> <span class="o">?</span> <span class="nx">str</span> <span class="o">+</span> <span class="nx">padding</span> <span class="o">:</span> <span class="nx">padding</span> <span class="o">+</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// justify()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">justify</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">,</span> <span class="nx">customPadChar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">minWidth</span> <span class="o">-</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">diff</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">leftJustify</span> <span class="o">||</span> <span class="o">!</span><span class="nx">zeroPad</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">value</span> <span class="o">=</span> <span class="nx">pad</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">customPadChar</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">+</span> <span class="nx">pad</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nx">diff</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="o">+</span> <span class="nx">value</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">prefix</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// formatBaseX()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">formatBaseX</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">base</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Note: casts negative numbers to positive ones</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">number</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">prefix</span> <span class="o">=</span> <span class="nx">prefix</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">number</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;2&#39;</span><span class="o">:</span> <span class="s1">&#39;0b&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;8&#39;</span><span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;16&#39;</span><span class="o">:</span> <span class="s1">&#39;0x&#39;</span>
</span><span class='line'>    <span class="p">}[</span><span class="nx">base</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">value</span> <span class="o">=</span> <span class="nx">prefix</span> <span class="o">+</span> <span class="nx">pad</span><span class="p">(</span><span class="nx">number</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="nx">base</span><span class="p">),</span> <span class="nx">precision</span> <span class="o">||</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">justify</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// formatString()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">formatString</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">,</span> <span class="nx">customPadChar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">precision</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">precision</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">justify</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">,</span> <span class="nx">customPadChar</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// doFormat()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">doFormat</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">substring</span><span class="p">,</span> <span class="nx">valueIndex</span><span class="p">,</span> <span class="nx">flags</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">prefix</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">method</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">textTransform</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">substring</span> <span class="o">==</span> <span class="s1">&#39;%%&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;%&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// parse flags</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">leftJustify</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">positivePrefix</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">zeroPad</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">prefixBaseX</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">customPadChar</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">flagsl</span> <span class="o">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">flags</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">flagsl</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="nx">flags</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">j</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39; &#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">positivePrefix</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">positivePrefix</span> <span class="o">=</span> <span class="s1">&#39;+&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">leftJustify</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;&#39;&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">customPadChar</span> <span class="o">=</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;0&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">zeroPad</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;#&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">prefixBaseX</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// parameters may be null, undefined, empty-string or real valued</span>
</span><span class='line'>    <span class="c1">// we want to ignore null, undefined and empty-string values</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">minWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">minWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">minWidth</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">minWidth</span> <span class="o">=</span> <span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">minWidth</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">minWidth</span> <span class="o">=</span> <span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">minWidth</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">minWidth</span> <span class="o">=</span> <span class="o">+</span><span class="nx">minWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Note: undocumented perl feature:</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">minWidth</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">minWidth</span> <span class="o">=</span> <span class="o">-</span><span class="nx">minWidth</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">leftJustify</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">minWidth</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;sprintf: (minimum-)width must be finite&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">precision</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">precision</span> <span class="o">=</span> <span class="s1">&#39;fFeE&#39;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">?</span> <span class="mi">6</span> <span class="o">:</span> <span class="p">(</span><span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;d&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">precision</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">precision</span> <span class="o">=</span> <span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">precision</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">precision</span> <span class="o">=</span> <span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">precision</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">precision</span> <span class="o">=</span> <span class="o">+</span><span class="nx">precision</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// grab value using valueIndex if required?</span>
</span><span class='line'>    <span class="nx">value</span> <span class="o">=</span> <span class="nx">valueIndex</span> <span class="o">?</span> <span class="nx">a</span><span class="p">[</span><span class="nx">valueIndex</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="o">:</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;s&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">formatString</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">value</span><span class="p">),</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">,</span> <span class="nx">customPadChar</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;c&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">formatString</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="o">+</span><span class="nx">value</span><span class="p">),</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;b&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">formatBaseX</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">prefixBaseX</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;o&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">formatBaseX</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">prefixBaseX</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;x&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">formatBaseX</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="nx">prefixBaseX</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;X&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">formatBaseX</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="nx">prefixBaseX</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;u&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">formatBaseX</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">prefixBaseX</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">precision</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;i&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;d&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">number</span> <span class="o">=</span> <span class="p">(</span><span class="o">+</span><span class="nx">value</span><span class="p">)</span> <span class="o">|</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">prefix</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;-&#39;</span> <span class="o">:</span> <span class="nx">positivePrefix</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">=</span> <span class="nx">prefix</span> <span class="o">+</span> <span class="nx">pad</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">number</span><span class="p">)),</span> <span class="nx">precision</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">justify</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;e&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;E&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;f&#39;</span><span class="o">:</span> <span class="c1">// Should handle locales (as per setlocale)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;F&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;g&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;G&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">number</span> <span class="o">=</span> <span class="o">+</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">prefix</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;-&#39;</span> <span class="o">:</span> <span class="nx">positivePrefix</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">method</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;toExponential&#39;</span><span class="p">,</span> <span class="s1">&#39;toFixed&#39;</span><span class="p">,</span> <span class="s1">&#39;toPrecision&#39;</span><span class="p">][</span><span class="s1">&#39;efg&#39;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">type</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">())];</span>
</span><span class='line'>        <span class="nx">textTransform</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;toString&#39;</span><span class="p">,</span> <span class="s1">&#39;toUpperCase&#39;</span><span class="p">][</span><span class="s1">&#39;eEfFgG&#39;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">=</span> <span class="nx">prefix</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">number</span><span class="p">)[</span><span class="nx">method</span><span class="p">](</span><span class="nx">precision</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">justify</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">prefix</span><span class="p">,</span> <span class="nx">leftJustify</span><span class="p">,</span> <span class="nx">minWidth</span><span class="p">,</span> <span class="nx">zeroPad</span><span class="p">)[</span><span class="nx">textTransform</span><span class="p">]();</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">substring</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">format</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">regex</span><span class="p">,</span> <span class="nx">doFormat</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/sprintf.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/sprintf.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript parse_str function]]></title>
    <link href="http://phpjs.org/functions/parse_str"/>
    <updated>2012-09-26T14:00:00+02:00</updated>
    <id>http://phpjs.org/functions/parse_str</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's parse_str</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strings/parse_str.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/parse_str.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">parse_str</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Cagri Ekin</span>
</span><span class='line'><span class="c1">// +   improved by: Michael White (http://getsprink.com)</span>
</span><span class='line'><span class="c1">// +    tweaked by: Jack</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Onno Marsman</span>
</span><span class='line'><span class="c1">// +   reimplemented by: stag019</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   bugfixed by: stag019</span>
</span><span class='line'><span class="c1">// +   input by: Dreamer</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   bugfixed by: MIO_KODUKI (http://mio-koduki.blogspot.com/)</span>
</span><span class='line'><span class="c1">// +   input by: Zaide (http://zaidesthings.com/)</span>
</span><span class='line'><span class="c1">// +   input by: David Pesta (http://davidpesta.com/)</span>
</span><span class='line'><span class="c1">// +   input by: jeicquest</span>
</span><span class='line'><span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// %        note 1: When no argument is specified, will put variables in global scope.</span>
</span><span class='line'><span class="c1">// %        note 1: When a particular argument has been passed, and the returned value is different parse_str of PHP. For example, a=b=c&amp;amp;d====c</span>
</span><span class='line'><span class="c1">// *     example 1: var arr = {};</span>
</span><span class='line'><span class="c1">// *     example 1: parse_str(&#39;first=foo&amp;amp;second=bar&#39;, arr);</span>
</span><span class='line'><span class="c1">// *     results 1: arr == { first: &#39;foo&#39;, second: &#39;bar&#39; }</span>
</span><span class='line'><span class="c1">// *     example 2: var arr = {};</span>
</span><span class='line'><span class="c1">// *     example 2: parse_str(&#39;str_a=Jack+and+Jill+didn%27t+see+the+well.&#39;, arr);</span>
</span><span class='line'><span class="c1">// *     results 2: arr == { str_a: &quot;Jack and Jill didn&#39;t see the well.&quot; }</span>
</span><span class='line'><span class="c1">// *     example 3: var abc = {3:&#39;a&#39;}; </span>
</span><span class='line'><span class="c1">// *     example 3: parse_str(&#39;abc[a][b][&quot;c&quot;]=def&amp;amp;abc[q]=t+5&#39;);</span>
</span><span class='line'><span class="c1">// *     results 3: JSON.stringify(abc) === &#39;{&quot;3&quot;:&quot;a&quot;,&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:&quot;def&quot;}},&quot;q&quot;:&quot;t 5&quot;}&#39;;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">strArr</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^&amp;amp;/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&amp;amp;$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">sal</span> <span class="o">=</span> <span class="nx">strArr</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">ct</span><span class="p">,</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">lastObj</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="nx">lastIter</span><span class="p">,</span> <span class="nx">undef</span><span class="p">,</span> <span class="nx">chr</span><span class="p">,</span> <span class="nx">tmp</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">postLeftBracketPos</span><span class="p">,</span> <span class="nx">keys</span><span class="p">,</span> <span class="nx">keysLen</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">fixStr</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\+/g</span><span class="p">,</span> <span class="s1">&#39;%20&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">array</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">sal</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">strArr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">key</span> <span class="o">=</span> <span class="nx">fixStr</span><span class="p">(</span><span class="nx">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">value</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tmp</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="nx">fixStr</span><span class="p">(</span><span class="nx">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">key</span> <span class="o">=</span> <span class="nx">key</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;\x00&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">key</span> <span class="o">=</span> <span class="nx">key</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">key</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;\x00&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">key</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">keys</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="nx">postLeftBracketPos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">key</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="o">!</span><span class="nx">postLeftBracketPos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">postLeftBracketPos</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">postLeftBracketPos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">keys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">postLeftBracketPos</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="nx">keys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">postLeftBracketPos</span><span class="p">,</span> <span class="nx">j</span> <span class="o">-</span> <span class="nx">postLeftBracketPos</span><span class="p">));</span>
</span><span class='line'>                    <span class="nx">postLeftBracketPos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">keys</span> <span class="o">=</span> <span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">chr</span> <span class="o">=</span> <span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">chr</span> <span class="o">===</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="nx">chr</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span> <span class="o">||</span> <span class="nx">chr</span> <span class="o">===</span> <span class="s1">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;_&#39;</span> <span class="o">+</span> <span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">substr</span><span class="p">(</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">chr</span> <span class="o">===</span> <span class="s1">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">obj</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">keysLen</span> <span class="o">=</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">keysLen</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">key</span> <span class="o">=</span> <span class="nx">keys</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^[&#39;&quot;]/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[&#39;&quot;]$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">lastIter</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">!==</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">lastObj</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="nx">key</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">key</span> <span class="o">!==</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">j</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">===</span> <span class="nx">undef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">obj</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="p">{</span> <span class="c1">// To insert new dimension</span>
</span><span class='line'>                <span class="nx">ct</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">p</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="o">+</span><span class="nx">p</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">ct</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^\d+$/g</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">ct</span> <span class="o">=</span> <span class="o">+</span><span class="nx">p</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">key</span> <span class="o">=</span> <span class="nx">ct</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">lastObj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/parse_str.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/parse_str.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript nl2br function]]></title>
    <link href="http://phpjs.org/functions/nl2br"/>
    <updated>2012-09-26T14:00:00+02:00</updated>
    <id>http://phpjs.org/functions/nl2br</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's nl2br</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>strings/nl2br.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/nl2br.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">nl2br</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">is_xhtml</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +   improved by: Philip Peterson</span>
</span><span class='line'><span class="c1">// +   improved by: Onno Marsman</span>
</span><span class='line'><span class="c1">// +   improved by: Atli Þór</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Onno Marsman</span>
</span><span class='line'><span class="c1">// +      input by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Maximusya</span>
</span><span class='line'><span class="c1">// *     example 1: nl2br(&#39;Kevin\nvan\nZonneveld&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;Kevin&amp;lt;br /&amp;gt;\nvan&amp;lt;br /&amp;gt;\nZonneveld&#39;</span>
</span><span class='line'><span class="c1">// *     example 2: nl2br(&quot;\nOne\nTwo\n\nThree\n&quot;, false);</span>
</span><span class='line'><span class="c1">// *     returns 2: &#39;&amp;lt;br&amp;gt;\nOne&amp;lt;br&amp;gt;\nTwo&amp;lt;br&amp;gt;\n&amp;lt;br&amp;gt;\nThree&amp;lt;br&amp;gt;\n&#39;</span>
</span><span class='line'><span class="c1">// *     example 3: nl2br(&quot;\nOne\nTwo\n\nThree\n&quot;, true);</span>
</span><span class='line'><span class="c1">// *     returns 3: &#39;&amp;lt;br /&amp;gt;\nOne&amp;lt;br /&amp;gt;\nTwo&amp;lt;br /&amp;gt;\n&amp;lt;br /&amp;gt;\nThree&amp;lt;br /&amp;gt;\n&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">breakTag</span> <span class="o">=</span> <span class="p">(</span><span class="nx">is_xhtml</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">is_xhtml</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&amp;lt;br &#39;</span> <span class="o">+</span> <span class="s1">&#39;/&amp;gt;&#39;</span> <span class="o">:</span> <span class="s1">&#39;&amp;lt;br&amp;gt;&#39;</span><span class="p">;</span> <span class="c1">// Adjust comment to avoid issue on phpjs.org display</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/([^&amp;gt;\r\n]?)(\r\n|\n\r|\r|\n)/g</span><span class="p">,</span> <span class="s1">&#39;$1&#39;</span> <span class="o">+</span> <span class="nx">breakTag</span> <span class="o">+</span> <span class="s1">&#39;$2&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/nl2br.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/nl2br.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
