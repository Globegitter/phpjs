<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: filesystem | ]]></title>
  <link href="http://phpjs.org/categories/filesystem/atom.xml" rel="self"/>
  <link href="http://phpjs.org/"/>
  <updated>2012-10-02T02:15:58+02:00</updated>
  <id>http://phpjs.org/</id>
  <author>
    <name><![CDATA[Kevin van Zonneveld]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript pathinfo function]]></title>
    <link href="http://phpjs.org/functions/pathinfo"/>
    <updated>2012-09-26T14:00:00+02:00</updated>
    <id>http://phpjs.org/functions/pathinfo</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's pathinfo</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>filesystem/pathinfo.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/filesystem/pathinfo.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">pathinfo</span> <span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Nate</span>
</span><span class='line'><span class="c1">// +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +    improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +    input by: Timo</span>
</span><span class='line'><span class="c1">// %        note 1: Inspired by actual PHP source: php5-5.2.6/ext/standard/string.c line #1559</span>
</span><span class='line'><span class="c1">// %        note 1: The way the bitwise arguments are handled allows for greater flexibility</span>
</span><span class='line'><span class="c1">// %        note 1: &amp;amp; compatability. We might even standardize this code and use a similar approach for</span>
</span><span class='line'><span class="c1">// %        note 1: other bitwise PHP functions</span>
</span><span class='line'><span class="c1">// %        note 2: php.js tries very hard to stay away from a core.js file with global dependencies, because we like</span>
</span><span class='line'><span class="c1">// %        note 2: that you can just take a couple of functions and be on your way.</span>
</span><span class='line'><span class="c1">// %        note 2: But by way we implemented this function, if you want you can still declare the PATHINFO_*</span>
</span><span class='line'><span class="c1">// %        note 2: yourself, and then you can use: pathinfo(&#39;/www/index.html&#39;, PATHINFO_BASENAME | PATHINFO_EXTENSION);</span>
</span><span class='line'><span class="c1">// %        note 2: which makes it fully compliant with PHP syntax.</span>
</span><span class='line'><span class="c1">// -    depends on: dirname</span>
</span><span class='line'><span class="c1">// -    depends on: basename</span>
</span><span class='line'><span class="c1">// *     example 1: pathinfo(&#39;/www/htdocs/index.html&#39;, 1);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;/www/htdocs&#39;</span>
</span><span class='line'><span class="c1">// *     example 2: pathinfo(&#39;/www/htdocs/index.html&#39;, &#39;PATHINFO_BASENAME&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 2: &#39;index.html&#39;</span>
</span><span class='line'><span class="c1">// *     example 3: pathinfo(&#39;/www/htdocs/index.html&#39;, &#39;PATHINFO_EXTENSION&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 3: &#39;html&#39;</span>
</span><span class='line'><span class="c1">// *     example 4: pathinfo(&#39;/www/htdocs/index.html&#39;, &#39;PATHINFO_FILENAME&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 4: &#39;index&#39;</span>
</span><span class='line'><span class="c1">// *     example 5: pathinfo(&#39;/www/htdocs/index.html&#39;, 2 | 4);</span>
</span><span class='line'><span class="c1">// *     returns 5: {basename: &#39;index.html&#39;, extension: &#39;html&#39;}</span>
</span><span class='line'><span class="c1">// *     example 6: pathinfo(&#39;/www/htdocs/index.html&#39;, &#39;PATHINFO_ALL&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 6: {dirname: &#39;/www/htdocs&#39;, basename: &#39;index.html&#39;, extension: &#39;html&#39;, filename: &#39;index&#39;}</span>
</span><span class='line'><span class="c1">// *     example 7: pathinfo(&#39;/www/htdocs/index.html&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 7: {dirname: &#39;/www/htdocs&#39;, basename: &#39;index.html&#39;, extension: &#39;html&#39;, filename: &#39;index&#39;}</span>
</span><span class='line'><span class="c1">// Working vars</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">opt</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">optName</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">optTemp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">tmp_arr</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">have_basename</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">have_extension</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">have_filename</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Input defaulting &amp;amp; sanitation</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span> <span class="o">=</span> <span class="s1">&#39;PATHINFO_ALL&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initialize binary arguments. Both the string &amp;amp; integer (constant) input is</span>
</span><span class='line'><span class="c1">// allowed</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">OPTS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;PATHINFO_DIRNAME&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;PATHINFO_BASENAME&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;PATHINFO_EXTENSION&#39;</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;PATHINFO_FILENAME&#39;</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;PATHINFO_ALL&#39;</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">// PATHINFO_ALL sums up all previously defined PATHINFOs (could just pre-calculate)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">optName</span> <span class="k">in</span> <span class="nx">OPTS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">OPTS</span><span class="p">.</span><span class="nx">PATHINFO_ALL</span> <span class="o">=</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">PATHINFO_ALL</span> <span class="o">|</span> <span class="nx">OPTS</span><span class="p">[</span><span class="nx">optName</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">options</span> <span class="o">!==</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Allow for a single string or an array of string flags</span>
</span><span class='line'>    <span class="nx">options</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Resolve string input to bitwise e.g. &#39;PATHINFO_EXTENSION&#39; becomes 4</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">OPTS</span><span class="p">[</span><span class="nx">options</span><span class="p">[</span><span class="nx">i</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">optTemp</span> <span class="o">=</span> <span class="nx">optTemp</span> <span class="o">|</span> <span class="nx">OPTS</span><span class="p">[</span><span class="nx">options</span><span class="p">[</span><span class="nx">i</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">options</span> <span class="o">=</span> <span class="nx">optTemp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Internal Functions</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">__getExt</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">path</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dotP</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="nx">dotP</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="nx">dotP</span> <span class="o">!==</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="nx">str</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">dotP</span><span class="p">)</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Gather path infos</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">options</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">PATHINFO_DIRNAME</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">dirname</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dirname</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">tmp_arr</span><span class="p">.</span><span class="nx">dirname</span> <span class="o">=</span> <span class="nx">dirname</span> <span class="o">===</span> <span class="nx">path</span> <span class="o">?</span> <span class="s1">&#39;.&#39;</span> <span class="o">:</span> <span class="nx">dirname</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">options</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">PATHINFO_BASENAME</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kc">false</span> <span class="o">===</span> <span class="nx">have_basename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">have_basename</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">basename</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">tmp_arr</span><span class="p">.</span><span class="nx">basename</span> <span class="o">=</span> <span class="nx">have_basename</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">options</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">PATHINFO_EXTENSION</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kc">false</span> <span class="o">===</span> <span class="nx">have_basename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">have_basename</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">basename</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kc">false</span> <span class="o">===</span> <span class="nx">have_extension</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">have_extension</span> <span class="o">=</span> <span class="nx">__getExt</span><span class="p">(</span><span class="nx">have_basename</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kc">false</span> <span class="o">!==</span> <span class="nx">have_extension</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">tmp_arr</span><span class="p">.</span><span class="nx">extension</span> <span class="o">=</span> <span class="nx">have_extension</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">options</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">PATHINFO_FILENAME</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kc">false</span> <span class="o">===</span> <span class="nx">have_basename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">have_basename</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">basename</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kc">false</span> <span class="o">===</span> <span class="nx">have_extension</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">have_extension</span> <span class="o">=</span> <span class="nx">__getExt</span><span class="p">(</span><span class="nx">have_basename</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kc">false</span> <span class="o">===</span> <span class="nx">have_filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">have_filename</span> <span class="o">=</span> <span class="nx">have_basename</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">have_basename</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="p">(</span><span class="nx">have_extension</span> <span class="o">?</span> <span class="nx">have_extension</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">have_extension</span> <span class="o">===</span> <span class="kc">false</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">tmp_arr</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="nx">have_filename</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// If array contains only 1 element: return string</span>
</span><span class='line'><span class="nx">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">opt</span> <span class="k">in</span> <span class="nx">tmp_arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">cnt</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">tmp_arr</span><span class="p">[</span><span class="nx">opt</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Return full-blown array</span>
</span><span class='line'><span class="k">return</span> <span class="nx">tmp_arr</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/filesystem/pathinfo.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/filesystem/pathinfo.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript rewind function]]></title>
    <link href="http://phpjs.orgfunctions/rewind"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://phpjs.orgfunctions/rewind</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's rewind</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>filesystem/rewind.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/filesystem/rewind.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">rewind</span> <span class="p">(</span><span class="nx">handle</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// *     example 1: var h = fopen(&#39;http://kevin.vanzonneveld.net/pj_test_supportfile_1.htm&#39;, &#39;r&#39;);</span>
</span><span class='line'><span class="c1">// *     example 1: fread(h, 100);</span>
</span><span class='line'><span class="c1">// *     example 1: rewind(h);</span>
</span><span class='line'><span class="c1">// *     returns 1: true</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">getFuncName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="p">(</span><span class="sr">/\W*function\s+([\w\$]+)\s*\(/</span><span class="p">).</span><span class="nx">exec</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;(Anonymous)&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">name</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceData</span> <span class="o">||</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceDataPointer</span> <span class="o">||</span> <span class="o">!</span><span class="nx">handle</span> <span class="o">||</span> <span class="o">!</span><span class="nx">handle</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">||</span> <span class="nx">getFuncName</span><span class="p">(</span><span class="nx">handle</span><span class="p">.</span><span class="nx">constructor</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;PHPJS_Resource&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceDataPointer</span><span class="p">[</span><span class="nx">handle</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/filesystem/rewind.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/filesystem/rewind.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript realpath function]]></title>
    <link href="http://phpjs.orgfunctions/realpath"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://phpjs.orgfunctions/realpath</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's realpath</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>filesystem/realpath.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/filesystem/realpath.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">realpath</span> <span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: mk.keck</span>
</span><span class='line'><span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// %        note 1: Returned path is an url like e.g. &#39;http://yourhost.tld/path/&#39;</span>
</span><span class='line'><span class="c1">// *     example 1: realpath(&#39;../.././_supporters/pj_test_supportfile_1.htm&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;file:/home/kevin/workspace/_supporters/pj_test_supportfile_1.htm&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span> <span class="cm">/* Save the root, if not given */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span> <span class="cm">/* Avoid input failures */</span>
</span><span class='line'><span class="nx">path</span> <span class="o">=</span> <span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;\\&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span> <span class="cm">/* Check if there&#39;s a port in path (like &#39;http://&#39;) */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;://&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* Ok, there&#39;s not a port in path, so let&#39;s take the root */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">path</span> <span class="o">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">path</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* Explode the given path into it&#39;s parts */</span>
</span><span class='line'><span class="nx">arr</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span> <span class="cm">/* The path is an array now */</span>
</span><span class='line'><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span> <span class="cm">/* Foreach part make a check */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* This is&#39;nt really interesting */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="cm">/* This reduces the realpath */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;..&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/* But only if there more than 3 parts in the path-array.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;         * The first three parts are for the uri */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="cm">/* This adds parts to the realpath */</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/* But only if the part is not empty or the uri&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;         * (the first three parts ar needed) was not</span>
</span><span class='line'><span class="cm">         * saved */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="nx">path</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="cm">/* Returns the absloute path as a string */</span>
</span><span class='line'><span class="k">return</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/filesystem/realpath.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/filesystem/realpath.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript readfile function]]></title>
    <link href="http://phpjs.orgfunctions/readfile"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://phpjs.orgfunctions/readfile</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's readfile</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>filesystem/readfile.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/filesystem/readfile.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">readfile</span> <span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">use_include_path</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// -    depends on: echo</span>
</span><span class='line'><span class="c1">// *     example 1: readfile(&#39;http://kevin.vanzonneveld.net/pj_test_supportfile_1.htm&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;123&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">read_data</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">use_include_path</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span> <span class="c1">// bitwise-or use_include_path?</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">read_data</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="nx">read_data</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/filesystem/readfile.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/filesystem/readfile.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript popen function]]></title>
    <link href="http://phpjs.orgfunctions/popen"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://phpjs.orgfunctions/popen</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's popen</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>filesystem/popen.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/filesystem/popen.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">popen</span> <span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">mode</span><span class="p">,</span> <span class="nx">use_include_path</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   input by: Paul Smith</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// -    depends on: file_get_contents</span>
</span><span class='line'><span class="c1">// *     example 1: popen(&#39;http://kevin.vanzonneveld.net/pj_test_supportfile_1.htm&#39;, &#39;r&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;Resource id #1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">resource</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">getFuncName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="p">(</span><span class="sr">/\W*function\s+([\w\$]+)\s*\(/</span><span class="p">).</span><span class="nx">exec</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;(Anonymous)&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">name</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN file inclusion: file_get_contents</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">file_get_contents</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">ActiveXObject</span> <span class="o">?</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;Microsoft.XMLHTTP&quot;</span><span class="p">)</span> <span class="o">:</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;XMLHttpRequest not supported&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="sr">/^http/</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Allow references within or below the same directory (should fix to allow other relative references or root reference; could make dependent on parse_url())</span>
</span><span class='line'>        <span class="nx">url</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">url</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">// END file inclusion</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">use_include_path</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">use_include_path</span> <span class="o">===</span> <span class="s1">&#39;1&#39;</span> <span class="o">||</span> <span class="nx">use_include_path</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Not implemented yet: Search for file in include path too</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Not implemented yet, but could be useful to modify nature of HTTP request, etc.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">mode</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Have to deal with other flags if ever allow</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="nx">mode</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;r&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">mode</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="nx">mode</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;+&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;w&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// or &#39;w+&#39;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;a&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// or &#39;a+&#39;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;x&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// or &#39;x+&#39;</span>
</span><span class='line'>        <span class="k">throw</span> <span class="s1">&#39;Writing is not implemented&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;b&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;t&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">throw</span> <span class="s1">&#39;Windows-only modes are not supported&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">throw</span> <span class="s1">&#39;Unrecognized file mode passed to &#39;</span> <span class="o">+</span> <span class="nx">getFuncName</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">caller</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;()&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceData</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceData</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceDataPointer</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceDataPointer</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceIdCounter</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceIdCounter</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="c1">// END REDUNDANT</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN STATIC</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">PHPJS_Resource</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">opener</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Can reuse the following for other resources, just changing the instantiation</span>
</span><span class='line'>    <span class="c1">// See http://php.net/manual/en/resource.php for types</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">opener</span> <span class="o">=</span> <span class="nx">opener</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">PHPJS_Resource</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;Resource id #&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">PHPJS_Resource</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">get_resource_type</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">PHPJS_Resource</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">var_dump</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;resource(&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;) of type (&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">// END STATIC</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceIdCounter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceData</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceIdCounter</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceDataPointer</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceIdCounter</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PHPJS_Resource</span><span class="p">(</span><span class="s1">&#39;stream&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">resourceIdCounter</span><span class="p">,</span> <span class="s1">&#39;popen&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">resource</span><span class="p">.</span><span class="nx">mode</span> <span class="o">=</span> <span class="nx">mode</span><span class="p">;</span> <span class="c1">// Add file-specific attributes</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">resource</span><span class="p">;</span> <span class="c1">// may be &#39;file&#39; instead of &#39;stream&#39; type on some systems</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/filesystem/popen.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/filesystem/popen.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
